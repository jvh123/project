#AMPP 이용한 절대 수익률 
 
#1. 데이터 가져오기
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pandas_datareader.data as web
import matplotlib
matplotlib.rc('font', family='Malgun Gothic',size=8, weight = 'bold')
 
파일 = pd.ExcelFile('pfadata.xlsx')
자산군 = 파일.sheet_names
자산군
 
#2. 자산군별 데이터 프레임 설정
자료 = {}
for i in 자산군:
    자료[i] = 파일.parse(i)
    자료[i].index = 자료[i].날짜
    자료[i].drop('날짜', axis = 1, inplace=True)
    print(i+'개수',len(자료[i].columns))
 
#3. 함수 설정
def 월간수익률(데이터):
    return 데이터 / 데이터.shift(1)
 
def 변동성대비모멘텀(데이터):
    a = 데이터/데이터.shift(12)
    b = 월간수익률(데이터).rolling(12).std()
    return a/b
 
def 연평균수익률(데이터):
    return 데이터/데이터.shift(12)
 
def 평균모멘텀(데이터):
    초기값 = 0
    for i in range(1, 13):
        초기값 = 데이터 / 데이터.shift(i) + 초기값
    return 초기값 / 12
 
def 모멘텀순위(데이터, 순위):
    x = 평균모멘텀(데이터)
    y = x.iloc[ : , 0: len(x.columns)].rank(1, ascending=0)
    y[y <= 순위] = 1
    y[y > 순위] = 0
    return y
 
def 평균모멘텀스코어(데이터):
    a = 평균모멘텀(데이터).copy()
    초기값 = 0
    for i in range(1, 13):
        초기값 = np.where(데이터 / 데이터.shift(i) > 1, 1, 0) + 초기값
    a[a > -1] = 초기값/12
    return a
 
def 평균모멘텀스코어6(데이터):
    a = 평균모멘텀(데이터).copy()
    초기값 = 0
    for i in range(1, 7):
        초기값 = np.where(데이터 / 데이터.shift(i) > 1, 1, 0) + 초기값
    a[a > -1] = 초기값/6
    return a
 
def 현금혼합모멘텀수익곡선(데이터, 현금비율=1):
    x = 월간수익률(자료['현금'])*현금비율
    a = pd.DataFrame((월간수익률(데이터).values*평균모멘텀스코어(데이터).shift(1).values+x.values)/(현금비율+평균모멘텀스코어(데이터).shift(1).values)).cumprod() 
    a.index = 데이터.index
    a.columns = 데이터.columns
    return a
 
def 자산군통합포트(데이터, 순위, 자산군비중):
    x = 월간수익률(현금혼합모멘텀수익곡선(데이터))
    y = np.where(모멘텀순위(데이터, 순위).shift(1)==0,np.nan,자산군비중/순위)
    z = ((x*y).sum(1)).dropna()
    z = z.replace(0, np.nan)
    return z
 
def 통합모멘텀(국가비중,섹터비중,팩터비중,채권비중):
    a = 자산군통합포트(자료['국가'],6,국가비중)
    b = 자산군통합포트(자료['섹터'],4,섹터비중)
    c = 자산군통합포트(자료['팩터'],2,팩터비중)
    d = 자산군통합포트(자료['채권'],1,채권비중)
    e = (pd.concat([a, b, c, d], axis=1).sum(1)/(국가비중+섹터비중+팩터비중+채권비중))
    e = e.replace(0,np.nan).cumprod()
    e.columns = ['통합수익']
    return e
 
def 수익곡선모멘텀(국가비중,섹터비중,팩터비중,채권비중):
    x = 월간수익률(자료['현금'])
    y = pd.DataFrame(통합모멘텀(국가비중,섹터비중,팩터비중,채권비중), index = x.index)    
    a = pd.DataFrame((월간수익률(y).values*평균모멘텀스코어6(y).shift(1).values+(1-평균모멘텀스코어6(y).shift(1).values)*x.values), index = x.index).cumprod().dropna()
    return a
 
#4. 결과 plot
# 국가, 섹터, 팩터, 채권
 
a = 수익곡선모멘텀(1,0,0,1)
b = 자료['국가'].한국/자료['국가'].한국.ix[0]
c = pd.concat([a, b], axis=1).dropna()
c.columns = ['포트폴리오', '코스피']
c.divide(c.ix[0]).plot(figsize = (8,6))
plt.show()
 
#5. MDD
최대하락 = c.포트폴리오.rolling(min_periods=1, window = 500).max()
당월하락 = c.포트폴리오/최대하락 - 1.0
최대하락폭 = 당월하락.rolling(min_periods=1, window=500).min()
 
당월하락.plot(subplots=True, figsize = (8,2), linestyle='dotted')
최대하락폭.plot(subplots=True, figsize = (8,2), color = 'red')
plt.show()
 
#6. MDD / CAGR
투자기간 = len(c.index)/12
print("MDD : "+str(최대하락폭.min()*100)[0:5]+"%")
print("CAGR : "+str(c.포트폴리오[-1]**(1/투자기간)*100-100)[0:4]+"%")
